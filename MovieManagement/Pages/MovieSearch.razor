@page "/moviesearch"
@using MovieManagement.ViewModels
@inject MovieManagementContext Context

<MudText Typo="Typo.h3">Movie search</MudText>

<div style="max-width: 400px;">
    <MudCard>
        <MudCardContent>
            <MudForm>
                <MudTextField T="string" Label="Production company" @bind-Text="@searchString" />
            </MudForm>
        </MudCardContent>
    </MudCard>

    <MudPaper Class="pa-4 justify-center my-4 mud-text-align-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search">Search</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Reset" Class="mx-2">Reset</MudButton>
    </MudPaper>

    <DynamicSearchResult @ref="MovieSearchResult" TItem="MovieViewModel" Data="@Data" FoundEntity="@ProductionCompany?.PrcName" UserInput="@searchString"></DynamicSearchResult>

    @if (error != null)
    {
        <MudText Color="@Color.Error">@error</MudText>
    }
</div>

@code {
    private string searchString;
    private DynamicSearchResult<MovieViewModel> MovieSearchResult;
    private ProductionCompany ProductionCompany;
    private List<MovieViewModel> Data;
    private string error;

    public void Search()
    {
        ProductionCompany = Context.ProductionCompany
            .Include(c => c.Movie)
            .FirstOrDefault(c => c.PrcName.ToLower().Contains(searchString.ToLower()));

        Data = new List<MovieViewModel>();
        if (ProductionCompany != null)
        {
            foreach (var item in ProductionCompany.Movie)
            {
                Data.Add(new MovieViewModel(item.MovTitle, item.MovReleased ?? new DateTime(), ProductionCompany.PrcName));
            }

            MovieSearchResult.Show();
        }
        else
        {
            error = "Production company not found!";
        }

    }

    public void Reset()
    {
        searchString = null;
        Data.Clear();
        error = null;
    }
}
