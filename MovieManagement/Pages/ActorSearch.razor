@page "/actorsearch"
@using MovieManagement.ViewModels
@inject MovieManagementContext Context

<MudText Typo="Typo.h3">Actor search</MudText>

<div style="max-width: 400px;">
    <MudCard>
        <MudCardContent>
            <MudForm>
                <MudTextField T="string" Label="Actor" @bind-Text="@searchString" />
            </MudForm>
        </MudCardContent>
    </MudCard>

    <MudPaper Class="pa-4 justify-center my-4 mud-text-align-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search">Search</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Reset" Class="mx-2">Reset</MudButton>
    </MudPaper>

    <DynamicSearchResult @ref="ActorSearchResult" TItem="ActorViewModel" Data="@Data" FoundEntity="@Actor?.ActFirstName" UserInput="@searchString"></DynamicSearchResult>

    @if (error != null)
    {
        <MudText Color="@Color.Error">@error</MudText>
    }
</div>

@code {
    private string searchString;
    private DynamicSearchResult<ActorViewModel> ActorSearchResult;
    private Actor Actor;
    private List<ActorViewModel> Data;

    private string error;

    public void Search()
    {
        Actor = Context.Actor
            .Include(c => c.MovieActor)
            .ThenInclude(c => c.Mov)
            .ThenInclude(c => c.Prc)
            .FirstOrDefault(c => c.ActFirstName.Contains(searchString));


        if (Actor != null)
        {
            foreach (var item in Actor.MovieActor)
            {
                Data.Add(new ActorViewModel(item.Mov.MovTitle, item.Mov.Prc.PrcName));
            }

            ActorSearchResult.Show();
        }
        else
        {
            error = "Production company not found!";
        }

    }

    public void Reset()
    {
        searchString = null;
        Data.Clear();
        error = null;
    }
}
